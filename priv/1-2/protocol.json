{
  "domains": [
    {
      "commands": [
        {
          "description": "Enables page domain notifications.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "enable"
        },
        {
          "description": "Disables page domain notifications.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "disable"
        },
        {
          "description": "Reloads given page optionally ignoring the cache.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "reload",
          "parameters": [
            {
              "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh).",
              "name": "ignoreCache",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "If set, the script will be injected into all frames of the inspected page after reload.",
              "name": "scriptToEvaluateOnLoad",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "description": "Navigates current page to the given URL.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "navigate",
          "parameters": [
            {
              "description": "URL to navigate the page to.",
              "name": "url",
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "FrameId",
              "description": "Frame id that will be navigated.",
              "experimental": true,
              "name": "frameId"
            }
          ]
        },
        {
          "description": "Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.",
          "handlers": [
            "browser"
          ],
          "name": "setGeolocationOverride",
          "parameters": [
            {
              "description": "Mock latitude",
              "name": "latitude",
              "optional": true,
              "type": "number"
            },
            {
              "description": "Mock longitude",
              "name": "longitude",
              "optional": true,
              "type": "number"
            },
            {
              "description": "Mock accuracy",
              "name": "accuracy",
              "optional": true,
              "type": "number"
            }
          ],
          "redirect": "Emulation"
        },
        {
          "description": "Clears the overriden Geolocation Position and Error.",
          "handlers": [
            "browser"
          ],
          "name": "clearGeolocationOverride",
          "redirect": "Emulation"
        },
        {
          "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
          "handlers": [
            "browser"
          ],
          "name": "handleJavaScriptDialog",
          "parameters": [
            {
              "description": "Whether to accept or dismiss the dialog.",
              "name": "accept",
              "type": "boolean"
            },
            {
              "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.",
              "name": "promptText",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ],
      "dependencies": [
        "Debugger",
        "DOM"
      ],
      "description": "Actions and events related to the inspected page belong to the page domain.",
      "domain": "Page",
      "events": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "description": "Fired when frame has been attached to its parent.",
          "name": "frameAttached",
          "parameters": [
            {
              "$ref": "FrameId",
              "description": "Id of the frame that has been attached.",
              "name": "frameId"
            },
            {
              "$ref": "FrameId",
              "description": "Parent frame identifier.",
              "name": "parentFrameId"
            }
          ]
        },
        {
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "name": "frameNavigated",
          "parameters": [
            {
              "$ref": "Frame",
              "description": "Frame object.",
              "name": "frame"
            }
          ]
        },
        {
          "description": "Fired when frame has been detached from its parent.",
          "name": "frameDetached",
          "parameters": [
            {
              "$ref": "FrameId",
              "description": "Id of the frame that has been detached.",
              "name": "frameId"
            }
          ]
        },
        {
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
          "name": "javascriptDialogOpening",
          "parameters": [
            {
              "description": "Message that will be displayed by the dialog.",
              "name": "message",
              "type": "string"
            },
            {
              "$ref": "DialogType",
              "description": "Dialog type.",
              "name": "type"
            }
          ]
        },
        {
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.",
          "name": "javascriptDialogClosed",
          "parameters": [
            {
              "description": "Whether dialog was confirmed.",
              "name": "result",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Fired when interstitial page was shown",
          "handlers": [
            "browser"
          ],
          "name": "interstitialShown"
        },
        {
          "description": "Fired when interstitial page was hidden",
          "handlers": [
            "browser"
          ],
          "name": "interstitialHidden"
        },
        {
          "description": "Fired when a navigation is started if navigation throttles are enabled.  The navigation will be deferred until processNavigation is called.",
          "handlers": [
            "browser"
          ],
          "name": "navigationRequested",
          "parameters": [
            {
              "description": "Whether the navigation is taking place in the main frame or in a subframe.",
              "name": "isInMainFrame",
              "type": "boolean"
            },
            {
              "description": "Whether the navigation has encountered a server redirect or not.",
              "name": "isRedirect",
              "type": "boolean"
            },
            {
              "name": "navigationId",
              "type": "integer"
            },
            {
              "description": "URL of requested navigation.",
              "name": "url",
              "type": "string"
            }
          ]
        }
      ],
      "types": [
        {
          "description": "Resource type as it was perceived by the rendering engine.",
          "enum": [
            "Document",
            "Stylesheet",
            "Image",
            "Media",
            "Font",
            "Script",
            "TextTrack",
            "XHR",
            "Fetch",
            "EventSource",
            "WebSocket",
            "Manifest",
            "Other"
          ],
          "id": "ResourceType",
          "type": "string"
        },
        {
          "description": "Unique frame identifier.",
          "id": "FrameId",
          "type": "string"
        },
        {
          "description": "Information about the Frame on the page.",
          "id": "Frame",
          "properties": [
            {
              "description": "Frame unique identifier.",
              "name": "id",
              "type": "string"
            },
            {
              "description": "Parent frame identifier.",
              "name": "parentId",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "Network.LoaderId",
              "description": "Identifier of the loader associated with this frame.",
              "name": "loaderId"
            },
            {
              "description": "Frame's name as specified in the tag.",
              "name": "name",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Frame document's URL.",
              "name": "url",
              "type": "string"
            },
            {
              "description": "Frame document's security origin.",
              "name": "securityOrigin",
              "type": "string"
            },
            {
              "description": "Frame document's mimeType as determined by the browser.",
              "name": "mimeType",
              "type": "string"
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media query results).",
          "handlers": [
            "browser"
          ],
          "name": "setDeviceMetricsOverride",
          "parameters": [
            {
              "description": "Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "name": "width",
              "type": "integer"
            },
            {
              "description": "Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "name": "height",
              "type": "integer"
            },
            {
              "description": "Overriding device scale factor value. 0 disables the override.",
              "name": "deviceScaleFactor",
              "type": "number"
            },
            {
              "description": "Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.",
              "name": "mobile",
              "type": "boolean"
            },
            {
              "description": "Whether a view that exceeds the available browser window area should be scaled down to fit.",
              "name": "fitWindow",
              "type": "boolean"
            },
            {
              "description": "Scale to apply to resulting view image. Ignored in |fitWindow| mode.",
              "experimental": true,
              "name": "scale",
              "optional": true,
              "type": "number"
            },
            {
              "deprecated": true,
              "description": "Not used.",
              "experimental": true,
              "name": "offsetX",
              "optional": true,
              "type": "number"
            },
            {
              "deprecated": true,
              "description": "Not used.",
              "experimental": true,
              "name": "offsetY",
              "optional": true,
              "type": "number"
            },
            {
              "description": "Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.",
              "experimental": true,
              "name": "screenWidth",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.",
              "experimental": true,
              "name": "screenHeight",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.",
              "experimental": true,
              "name": "positionX",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.",
              "experimental": true,
              "name": "positionY",
              "optional": true,
              "type": "integer"
            },
            {
              "$ref": "ScreenOrientation",
              "description": "Screen orientation override.",
              "name": "screenOrientation",
              "optional": true
            }
          ]
        },
        {
          "description": "Clears the overriden device metrics.",
          "handlers": [
            "browser"
          ],
          "name": "clearDeviceMetricsOverride"
        },
        {
          "description": "Toggles mouse event-based touch event emulation.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "setTouchEmulationEnabled",
          "parameters": [
            {
              "description": "Whether the touch event emulation should be enabled.",
              "name": "enabled",
              "type": "boolean"
            },
            {
              "description": "Touch/gesture events configuration. Default: current platform.",
              "enum": [
                "mobile",
                "desktop"
              ],
              "name": "configuration",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "description": "Emulates the given media for CSS media queries.",
          "name": "setEmulatedMedia",
          "parameters": [
            {
              "description": "Media type to emulate. Empty string disables the override.",
              "name": "media",
              "type": "string"
            }
          ]
        }
      ],
      "description": "This domain emulates different environments for the page.",
      "domain": "Emulation",
      "events": [],
      "types": [
        {
          "description": "Screen orientation.",
          "id": "ScreenOrientation",
          "properties": [
            {
              "description": "Orientation type.",
              "enum": [
                "portraitPrimary",
                "portraitSecondary",
                "landscapePrimary",
                "landscapeSecondary"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "description": "Orientation angle.",
              "name": "angle",
              "type": "integer"
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Enables network tracking, network events will now be delivered to the client.",
          "name": "enable",
          "parameters": [
            {
              "description": "Buffer size in bytes to use when preserving network payloads (XHRs, etc).",
              "experimental": true,
              "name": "maxTotalBufferSize",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).",
              "experimental": true,
              "name": "maxResourceBufferSize",
              "optional": true,
              "type": "integer"
            }
          ]
        },
        {
          "description": "Disables network tracking, prevents network events from being sent to the client.",
          "name": "disable"
        },
        {
          "description": "Allows overriding user agent with the given string.",
          "name": "setUserAgentOverride",
          "parameters": [
            {
              "description": "User agent to use.",
              "name": "userAgent",
              "type": "string"
            }
          ]
        },
        {
          "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
          "name": "setExtraHTTPHeaders",
          "parameters": [
            {
              "$ref": "Headers",
              "description": "Map with extra HTTP headers.",
              "name": "headers"
            }
          ]
        },
        {
          "async": true,
          "description": "Returns content served for the given request.",
          "name": "getResponseBody",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Identifier of the network request to get content for.",
              "name": "requestId"
            }
          ],
          "returns": [
            {
              "description": "Response body.",
              "name": "body",
              "type": "string"
            },
            {
              "description": "True, if content was sent as base64.",
              "name": "base64Encoded",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Tells whether clearing browser cache is supported.",
          "name": "canClearBrowserCache",
          "returns": [
            {
              "description": "True if browser cache can be cleared.",
              "name": "result",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Clears browser cache.",
          "handlers": [
            "browser"
          ],
          "name": "clearBrowserCache"
        },
        {
          "description": "Tells whether clearing browser cookies is supported.",
          "name": "canClearBrowserCookies",
          "returns": [
            {
              "description": "True if browser cookies can be cleared.",
              "name": "result",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Clears browser cookies.",
          "handlers": [
            "browser"
          ],
          "name": "clearBrowserCookies"
        },
        {
          "description": "Activates emulation of network conditions.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "emulateNetworkConditions",
          "parameters": [
            {
              "description": "True to emulate internet disconnection.",
              "name": "offline",
              "type": "boolean"
            },
            {
              "description": "Additional latency (ms).",
              "name": "latency",
              "type": "number"
            },
            {
              "description": "Maximal aggregated download throughput.",
              "name": "downloadThroughput",
              "type": "number"
            },
            {
              "description": "Maximal aggregated upload throughput.",
              "name": "uploadThroughput",
              "type": "number"
            },
            {
              "$ref": "ConnectionType",
              "description": "Connection type if known.",
              "name": "connectionType",
              "optional": true
            }
          ]
        },
        {
          "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used.",
          "name": "setCacheDisabled",
          "parameters": [
            {
              "description": "Cache disabled state.",
              "name": "cacheDisabled",
              "type": "boolean"
            }
          ]
        }
      ],
      "dependencies": [
        "Runtime",
        "Security"
      ],
      "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
      "domain": "Network",
      "events": [
        {
          "description": "Fired when page is about to send HTTP request.",
          "name": "requestWillBeSent",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            },
            {
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "experimental": true,
              "name": "frameId"
            },
            {
              "$ref": "LoaderId",
              "description": "Loader identifier.",
              "name": "loaderId"
            },
            {
              "description": "URL of the document this request is loaded for.",
              "name": "documentURL",
              "type": "string"
            },
            {
              "$ref": "Request",
              "description": "Request data.",
              "name": "request"
            },
            {
              "$ref": "Timestamp",
              "description": "Timestamp.",
              "name": "timestamp"
            },
            {
              "$ref": "Timestamp",
              "description": "UTC Timestamp.",
              "experimental": true,
              "name": "wallTime"
            },
            {
              "$ref": "Initiator",
              "description": "Request initiator.",
              "name": "initiator"
            },
            {
              "$ref": "Response",
              "description": "Redirect response data.",
              "name": "redirectResponse",
              "optional": true
            },
            {
              "$ref": "Page.ResourceType",
              "description": "Type of this resource.",
              "experimental": true,
              "name": "type",
              "optional": true
            }
          ]
        },
        {
          "description": "Fired if request ended up loading from cache.",
          "name": "requestServedFromCache",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            }
          ]
        },
        {
          "description": "Fired when HTTP response is available.",
          "name": "responseReceived",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            },
            {
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "experimental": true,
              "name": "frameId"
            },
            {
              "$ref": "LoaderId",
              "description": "Loader identifier.",
              "name": "loaderId"
            },
            {
              "$ref": "Timestamp",
              "description": "Timestamp.",
              "name": "timestamp"
            },
            {
              "$ref": "Page.ResourceType",
              "description": "Resource type.",
              "name": "type"
            },
            {
              "$ref": "Response",
              "description": "Response data.",
              "name": "response"
            }
          ]
        },
        {
          "description": "Fired when data chunk was received over the network.",
          "name": "dataReceived",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            },
            {
              "$ref": "Timestamp",
              "description": "Timestamp.",
              "name": "timestamp"
            },
            {
              "description": "Data chunk length.",
              "name": "dataLength",
              "type": "integer"
            },
            {
              "description": "Actual bytes received (might be less than dataLength for compressed encodings).",
              "name": "encodedDataLength",
              "type": "integer"
            }
          ]
        },
        {
          "description": "Fired when HTTP request has finished loading.",
          "name": "loadingFinished",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            },
            {
              "$ref": "Timestamp",
              "description": "Timestamp.",
              "name": "timestamp"
            },
            {
              "description": "Total number of bytes received for this request.",
              "name": "encodedDataLength",
              "type": "number"
            }
          ]
        },
        {
          "description": "Fired when HTTP request has failed to load.",
          "name": "loadingFailed",
          "parameters": [
            {
              "$ref": "RequestId",
              "description": "Request identifier.",
              "name": "requestId"
            },
            {
              "$ref": "Timestamp",
              "description": "Timestamp.",
              "name": "timestamp"
            },
            {
              "$ref": "Page.ResourceType",
              "description": "Resource type.",
              "name": "type"
            },
            {
              "description": "User friendly error message.",
              "name": "errorText",
              "type": "string"
            },
            {
              "description": "True if loading was canceled.",
              "name": "canceled",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "BlockedReason",
              "description": "The reason why loading was blocked, if any.",
              "experimental": true,
              "name": "blockedReason",
              "optional": true
            }
          ]
        }
      ],
      "types": [
        {
          "description": "Unique loader identifier.",
          "id": "LoaderId",
          "type": "string"
        },
        {
          "description": "Unique request identifier.",
          "id": "RequestId",
          "type": "string"
        },
        {
          "description": "Number of seconds since epoch.",
          "id": "Timestamp",
          "type": "number"
        },
        {
          "description": "Request / response headers as keys / values of JSON object.",
          "id": "Headers",
          "type": "object"
        },
        {
          "description": "Loading priority of a resource request.",
          "enum": [
            "none",
            "cellular2g",
            "cellular3g",
            "cellular4g",
            "bluetooth",
            "ethernet",
            "wifi",
            "wimax",
            "other"
          ],
          "id": "ConnectionType",
          "type": "string"
        },
        {
          "description": "Represents the cookie's 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies",
          "enum": [
            "Strict",
            "Lax"
          ],
          "id": "CookieSameSite",
          "type": "string"
        },
        {
          "description": "Timing information for the request.",
          "id": "ResourceTiming",
          "properties": [
            {
              "description": "Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime.",
              "name": "requestTime",
              "type": "number"
            },
            {
              "description": "Started resolving proxy.",
              "name": "proxyStart",
              "type": "number"
            },
            {
              "description": "Finished resolving proxy.",
              "name": "proxyEnd",
              "type": "number"
            },
            {
              "description": "Started DNS address resolve.",
              "name": "dnsStart",
              "type": "number"
            },
            {
              "description": "Finished DNS address resolve.",
              "name": "dnsEnd",
              "type": "number"
            },
            {
              "description": "Started connecting to the remote host.",
              "name": "connectStart",
              "type": "number"
            },
            {
              "description": "Connected to the remote host.",
              "name": "connectEnd",
              "type": "number"
            },
            {
              "description": "Started SSL handshake.",
              "name": "sslStart",
              "type": "number"
            },
            {
              "description": "Finished SSL handshake.",
              "name": "sslEnd",
              "type": "number"
            },
            {
              "description": "Started running ServiceWorker.",
              "experimental": true,
              "name": "workerStart",
              "type": "number"
            },
            {
              "description": "Finished Starting ServiceWorker.",
              "experimental": true,
              "name": "workerReady",
              "type": "number"
            },
            {
              "description": "Started sending request.",
              "name": "sendStart",
              "type": "number"
            },
            {
              "description": "Finished sending request.",
              "name": "sendEnd",
              "type": "number"
            },
            {
              "description": "Time the server started pushing request.",
              "experimental": true,
              "name": "pushStart",
              "type": "number"
            },
            {
              "description": "Time the server finished pushing request.",
              "experimental": true,
              "name": "pushEnd",
              "type": "number"
            },
            {
              "description": "Finished receiving response headers.",
              "name": "receiveHeadersEnd",
              "type": "number"
            }
          ],
          "type": "object"
        },
        {
          "description": "Loading priority of a resource request.",
          "enum": [
            "VeryLow",
            "Low",
            "Medium",
            "High",
            "VeryHigh"
          ],
          "id": "ResourcePriority",
          "type": "string"
        },
        {
          "description": "HTTP request data.",
          "id": "Request",
          "properties": [
            {
              "description": "Request URL.",
              "name": "url",
              "type": "string"
            },
            {
              "description": "HTTP request method.",
              "name": "method",
              "type": "string"
            },
            {
              "$ref": "Headers",
              "description": "HTTP request headers.",
              "name": "headers"
            },
            {
              "description": "HTTP POST request data.",
              "name": "postData",
              "optional": true,
              "type": "string"
            },
            {
              "description": "The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/",
              "enum": [
                "blockable",
                "optionally-blockable",
                "none"
              ],
              "name": "mixedContentType",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "ResourcePriority",
              "description": "Priority of the resource request at the time request is sent.",
              "name": "initialPriority"
            }
          ],
          "type": "object"
        },
        {
          "description": "Details of a signed certificate timestamp (SCT).",
          "id": "SignedCertificateTimestamp",
          "properties": [
            {
              "description": "Validation status.",
              "name": "status",
              "type": "string"
            },
            {
              "description": "Origin.",
              "name": "origin",
              "type": "string"
            },
            {
              "description": "Log name / description.",
              "name": "logDescription",
              "type": "string"
            },
            {
              "description": "Log ID.",
              "name": "logId",
              "type": "string"
            },
            {
              "$ref": "Timestamp",
              "description": "Issuance date.",
              "name": "timestamp"
            },
            {
              "description": "Hash algorithm.",
              "name": "hashAlgorithm",
              "type": "string"
            },
            {
              "description": "Signature algorithm.",
              "name": "signatureAlgorithm",
              "type": "string"
            },
            {
              "description": "Signature data.",
              "name": "signatureData",
              "type": "string"
            }
          ],
          "type": "object"
        },
        {
          "description": "Security details about a request.",
          "id": "SecurityDetails",
          "properties": [
            {
              "description": "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").",
              "name": "protocol",
              "type": "string"
            },
            {
              "description": "Key Exchange used by the connection.",
              "name": "keyExchange",
              "type": "string"
            },
            {
              "description": "(EC)DH group used by the connection, if applicable.",
              "name": "keyExchangeGroup",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Cipher name.",
              "name": "cipher",
              "type": "string"
            },
            {
              "description": "TLS MAC. Note that AEAD ciphers do not have separate MACs.",
              "name": "mac",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "Security.CertificateId",
              "description": "Certificate ID value.",
              "name": "certificateId"
            },
            {
              "description": "Certificate subject name.",
              "name": "subjectName",
              "type": "string"
            },
            {
              "description": "Subject Alternative Name (SAN) DNS names and IP addresses.",
              "items": {
                "type": "string"
              },
              "name": "sanList",
              "type": "array"
            },
            {
              "description": "Name of the issuing CA.",
              "name": "issuer",
              "type": "string"
            },
            {
              "$ref": "Timestamp",
              "description": "Certificate valid from date.",
              "name": "validFrom"
            },
            {
              "$ref": "Timestamp",
              "description": "Certificate valid to (expiration) date",
              "name": "validTo"
            },
            {
              "description": "List of signed certificate timestamps (SCTs).",
              "items": {
                "$ref": "SignedCertificateTimestamp"
              },
              "name": "signedCertificateTimestampList",
              "type": "array"
            }
          ],
          "type": "object"
        },
        {
          "description": "HTTP response data.",
          "id": "Response",
          "properties": [
            {
              "description": "Response URL. This URL can be different from CachedResource.url in case of redirect.",
              "name": "url",
              "type": "string"
            },
            {
              "description": "HTTP response status code.",
              "name": "status",
              "type": "number"
            },
            {
              "description": "HTTP response status text.",
              "name": "statusText",
              "type": "string"
            },
            {
              "$ref": "Headers",
              "description": "HTTP response headers.",
              "name": "headers"
            },
            {
              "description": "HTTP response headers text.",
              "name": "headersText",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Resource mimeType as determined by the browser.",
              "name": "mimeType",
              "type": "string"
            },
            {
              "$ref": "Headers",
              "description": "Refined HTTP request headers that were actually transmitted over the network.",
              "name": "requestHeaders",
              "optional": true
            },
            {
              "description": "HTTP request headers text.",
              "name": "requestHeadersText",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Specifies whether physical connection was actually reused for this request.",
              "name": "connectionReused",
              "type": "boolean"
            },
            {
              "description": "Physical connection id that was actually used for this request.",
              "name": "connectionId",
              "type": "number"
            },
            {
              "description": "Remote IP address.",
              "experimental": true,
              "name": "remoteIPAddress",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Remote port.",
              "experimental": true,
              "name": "remotePort",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Specifies that the request was served from the disk cache.",
              "name": "fromDiskCache",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Specifies that the request was served from the ServiceWorker.",
              "name": "fromServiceWorker",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Total number of bytes received for this request so far.",
              "name": "encodedDataLength",
              "optional": false,
              "type": "number"
            },
            {
              "$ref": "ResourceTiming",
              "description": "Timing information for the given request.",
              "name": "timing",
              "optional": true
            },
            {
              "description": "Protocol used to fetch this request.",
              "name": "protocol",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "Security.SecurityState",
              "description": "Security state of the request resource.",
              "name": "securityState"
            },
            {
              "$ref": "SecurityDetails",
              "description": "Security details for the request.",
              "name": "securityDetails",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Information about the cached resource.",
          "id": "CachedResource",
          "properties": [
            {
              "description": "Resource URL. This is the url of the original network request.",
              "name": "url",
              "type": "string"
            },
            {
              "$ref": "Page.ResourceType",
              "description": "Type of this resource.",
              "name": "type"
            },
            {
              "$ref": "Response",
              "description": "Cached response data.",
              "name": "response",
              "optional": true
            },
            {
              "description": "Cached response body size.",
              "name": "bodySize",
              "type": "number"
            }
          ],
          "type": "object"
        },
        {
          "description": "Information about the request initiator.",
          "id": "Initiator",
          "properties": [
            {
              "description": "Type of this initiator.",
              "enum": [
                "parser",
                "script",
                "other"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "$ref": "Runtime.StackTrace",
              "description": "Initiator JavaScript stack trace, set for Script only.",
              "name": "stack",
              "optional": true
            },
            {
              "description": "Initiator URL, set for Parser type only.",
              "name": "url",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Initiator line number, set for Parser type only (0-based).",
              "name": "lineNumber",
              "optional": true,
              "type": "number"
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Enables DOM agent for the given page.",
          "name": "enable"
        },
        {
          "description": "Disables DOM agent for the given page.",
          "name": "disable"
        },
        {
          "description": "Returns the root DOM node to the caller.",
          "name": "getDocument",
          "returns": [
            {
              "$ref": "Node",
              "description": "Resulting node.",
              "name": "root"
            }
          ]
        },
        {
          "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth.",
          "name": "requestChildNodes",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to get children for.",
              "name": "nodeId"
            },
            {
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.",
              "experimental": true,
              "name": "depth",
              "optional": true,
              "type": "integer"
            }
          ]
        },
        {
          "description": "Executes <code>querySelector</code> on a given node.",
          "name": "querySelector",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to query upon.",
              "name": "nodeId"
            },
            {
              "description": "Selector string.",
              "name": "selector",
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "NodeId",
              "description": "Query selector result.",
              "name": "nodeId"
            }
          ]
        },
        {
          "description": "Executes <code>querySelectorAll</code> on a given node.",
          "name": "querySelectorAll",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to query upon.",
              "name": "nodeId"
            },
            {
              "description": "Selector string.",
              "name": "selector",
              "type": "string"
            }
          ],
          "returns": [
            {
              "description": "Query selector result.",
              "items": {
                "$ref": "NodeId"
              },
              "name": "nodeIds",
              "type": "array"
            }
          ]
        },
        {
          "description": "Sets node name for a node with given id.",
          "name": "setNodeName",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to set name for.",
              "name": "nodeId"
            },
            {
              "description": "New node's name.",
              "name": "name",
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "NodeId",
              "description": "New node's id.",
              "name": "nodeId"
            }
          ]
        },
        {
          "description": "Sets node value for a node with given id.",
          "name": "setNodeValue",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to set value for.",
              "name": "nodeId"
            },
            {
              "description": "New node's value.",
              "name": "value",
              "type": "string"
            }
          ]
        },
        {
          "description": "Removes node with given id.",
          "name": "removeNode",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to remove.",
              "name": "nodeId"
            }
          ]
        },
        {
          "description": "Sets attribute for an element with given id.",
          "name": "setAttributeValue",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the element to set attribute for.",
              "name": "nodeId"
            },
            {
              "description": "Attribute name.",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Attribute value.",
              "name": "value",
              "type": "string"
            }
          ]
        },
        {
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.",
          "name": "setAttributesAsText",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the element to set attributes for.",
              "name": "nodeId"
            },
            {
              "description": "Text with a number of attributes. Will parse this text using HTML parser.",
              "name": "text",
              "type": "string"
            },
            {
              "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully.",
              "name": "name",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "description": "Removes attribute with given name from an element with given id.",
          "name": "removeAttribute",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the element to remove attribute from.",
              "name": "nodeId"
            },
            {
              "description": "Name of the attribute to remove.",
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "description": "Returns node's HTML markup.",
          "name": "getOuterHTML",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to get markup for.",
              "name": "nodeId"
            }
          ],
          "returns": [
            {
              "description": "Outer HTML markup.",
              "name": "outerHTML",
              "type": "string"
            }
          ]
        },
        {
          "description": "Sets node HTML markup, returns new node id.",
          "name": "setOuterHTML",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to set markup for.",
              "name": "nodeId"
            },
            {
              "description": "Outer HTML markup to set.",
              "name": "outerHTML",
              "type": "string"
            }
          ]
        },
        {
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications.",
          "name": "requestNode",
          "parameters": [
            {
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id to convert into node.",
              "name": "objectId"
            }
          ],
          "returns": [
            {
              "$ref": "NodeId",
              "description": "Node id for given object.",
              "name": "nodeId"
            }
          ]
        },
        {
          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.",
          "name": "highlightRect",
          "parameters": [
            {
              "description": "X coordinate",
              "name": "x",
              "type": "integer"
            },
            {
              "description": "Y coordinate",
              "name": "y",
              "type": "integer"
            },
            {
              "description": "Rectangle width",
              "name": "width",
              "type": "integer"
            },
            {
              "description": "Rectangle height",
              "name": "height",
              "type": "integer"
            },
            {
              "$ref": "RGBA",
              "description": "The highlight fill color (default: transparent).",
              "name": "color",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The highlight outline color (default: transparent).",
              "name": "outlineColor",
              "optional": true
            }
          ]
        },
        {
          "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.",
          "name": "highlightNode",
          "parameters": [
            {
              "$ref": "HighlightConfig",
              "description": "A descriptor for the highlight appearance.",
              "name": "highlightConfig"
            },
            {
              "$ref": "NodeId",
              "description": "Identifier of the node to highlight.",
              "name": "nodeId",
              "optional": true
            },
            {
              "$ref": "BackendNodeId",
              "description": "Identifier of the backend node to highlight.",
              "name": "backendNodeId",
              "optional": true
            },
            {
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id of the node to be highlighted.",
              "experimental": true,
              "name": "objectId",
              "optional": true
            }
          ]
        },
        {
          "description": "Hides DOM node highlight.",
          "name": "hideHighlight"
        },
        {
          "description": "Resolves JavaScript node object for given node id.",
          "name": "resolveNode",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to resolve.",
              "name": "nodeId"
            },
            {
              "description": "Symbolic group name that can be used to release multiple objects.",
              "name": "objectGroup",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "Runtime.RemoteObject",
              "description": "JavaScript object wrapper for given node.",
              "name": "object"
            }
          ]
        },
        {
          "description": "Returns attributes for the specified node.",
          "name": "getAttributes",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to retrieve attibutes for.",
              "name": "nodeId"
            }
          ],
          "returns": [
            {
              "description": "An interleaved array of node attribute names and values.",
              "items": {
                "type": "string"
              },
              "name": "attributes",
              "type": "array"
            }
          ]
        },
        {
          "description": "Moves node into the new container, places it before the given anchor.",
          "name": "moveTo",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node to move.",
              "name": "nodeId"
            },
            {
              "$ref": "NodeId",
              "description": "Id of the element to drop the moved node into.",
              "name": "targetNodeId"
            },
            {
              "$ref": "NodeId",
              "description": "Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId</code>).",
              "name": "insertBeforeNodeId",
              "optional": true
            }
          ],
          "returns": [
            {
              "$ref": "NodeId",
              "description": "New id of the moved node.",
              "name": "nodeId"
            }
          ]
        }
      ],
      "dependencies": [
        "Runtime"
      ],
      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>",
      "domain": "DOM",
      "events": [
        {
          "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid.",
          "name": "documentUpdated"
        },
        {
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.",
          "name": "setChildNodes",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Parent node id to populate with children.",
              "name": "parentId"
            },
            {
              "description": "Child nodes array.",
              "items": {
                "$ref": "Node"
              },
              "name": "nodes",
              "type": "array"
            }
          ]
        },
        {
          "description": "Fired when <code>Element</code>'s attribute is modified.",
          "name": "attributeModified",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node that has changed.",
              "name": "nodeId"
            },
            {
              "description": "Attribute name.",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Attribute value.",
              "name": "value",
              "type": "string"
            }
          ]
        },
        {
          "description": "Fired when <code>Element</code>'s attribute is removed.",
          "name": "attributeRemoved",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node that has changed.",
              "name": "nodeId"
            },
            {
              "description": "A ttribute name.",
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "description": "Mirrors <code>DOMCharacterDataModified</code> event.",
          "name": "characterDataModified",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node that has changed.",
              "name": "nodeId"
            },
            {
              "description": "New text value.",
              "name": "characterData",
              "type": "string"
            }
          ]
        },
        {
          "description": "Fired when <code>Container</code>'s child node count has changed.",
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node that has changed.",
              "name": "nodeId"
            },
            {
              "description": "New node count.",
              "name": "childNodeCount",
              "type": "integer"
            }
          ]
        },
        {
          "description": "Mirrors <code>DOMNodeInserted</code> event.",
          "name": "childNodeInserted",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Id of the node that has changed.",
              "name": "parentNodeId"
            },
            {
              "$ref": "NodeId",
              "description": "If of the previous siblint.",
              "name": "previousNodeId"
            },
            {
              "$ref": "Node",
              "description": "Inserted node data.",
              "name": "node"
            }
          ]
        },
        {
          "description": "Mirrors <code>DOMNodeRemoved</code> event.",
          "name": "childNodeRemoved",
          "parameters": [
            {
              "$ref": "NodeId",
              "description": "Parent id.",
              "name": "parentNodeId"
            },
            {
              "$ref": "NodeId",
              "description": "Id of the node that has been removed.",
              "name": "nodeId"
            }
          ]
        }
      ],
      "types": [
        {
          "description": "Unique DOM node identifier.",
          "id": "NodeId",
          "type": "integer"
        },
        {
          "description": "Pseudo element type.",
          "enum": [
            "first-line",
            "first-letter",
            "before",
            "after",
            "backdrop",
            "selection",
            "first-line-inherited",
            "scrollbar",
            "scrollbar-thumb",
            "scrollbar-button",
            "scrollbar-track",
            "scrollbar-track-piece",
            "scrollbar-corner",
            "resizer",
            "input-list-button"
          ],
          "id": "PseudoType",
          "type": "string"
        },
        {
          "description": "Shadow root type.",
          "enum": [
            "user-agent",
            "open",
            "closed"
          ],
          "id": "ShadowRootType",
          "type": "string"
        },
        {
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.",
          "id": "Node",
          "properties": [
            {
              "$ref": "NodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client.",
              "name": "nodeId"
            },
            {
              "description": "<code>Node</code>'s nodeType.",
              "name": "nodeType",
              "type": "integer"
            },
            {
              "description": "<code>Node</code>'s nodeName.",
              "name": "nodeName",
              "type": "string"
            },
            {
              "description": "<code>Node</code>'s localName.",
              "name": "localName",
              "type": "string"
            },
            {
              "description": "<code>Node</code>'s nodeValue.",
              "name": "nodeValue",
              "type": "string"
            },
            {
              "description": "Child count for <code>Container</code> nodes.",
              "name": "childNodeCount",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Child nodes of this node when requested with children.",
              "items": {
                "$ref": "Node"
              },
              "name": "children",
              "optional": true,
              "type": "array"
            },
            {
              "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>.",
              "items": {
                "type": "string"
              },
              "name": "attributes",
              "optional": true,
              "type": "array"
            },
            {
              "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to.",
              "name": "documentURL",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion.",
              "experimental": true,
              "name": "baseURL",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>DocumentType</code>'s publicId.",
              "name": "publicId",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>DocumentType</code>'s systemId.",
              "name": "systemId",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>DocumentType</code>'s internalSubset.",
              "name": "internalSubset",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>Document</code>'s XML version in case of XML documents.",
              "name": "xmlVersion",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>Attr</code>'s name.",
              "name": "name",
              "optional": true,
              "type": "string"
            },
            {
              "description": "<code>Attr</code>'s value.",
              "name": "value",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "PseudoType",
              "description": "Pseudo element type for this node.",
              "name": "pseudoType",
              "optional": true
            },
            {
              "$ref": "ShadowRootType",
              "description": "Shadow root type.",
              "name": "shadowRootType",
              "optional": true
            },
            {
              "$ref": "Page.FrameId",
              "description": "Frame ID for frame owner elements.",
              "experimental": true,
              "name": "frameId",
              "optional": true
            },
            {
              "$ref": "Node",
              "description": "Content document for frame owner elements.",
              "name": "contentDocument",
              "optional": true
            },
            {
              "description": "Shadow root list for given element host.",
              "experimental": true,
              "items": {
                "$ref": "Node"
              },
              "name": "shadowRoots",
              "optional": true,
              "type": "array"
            },
            {
              "$ref": "Node",
              "description": "Content document fragment for template elements.",
              "experimental": true,
              "name": "templateContent",
              "optional": true
            },
            {
              "description": "Pseudo elements associated with this node.",
              "experimental": true,
              "items": {
                "$ref": "Node"
              },
              "name": "pseudoElements",
              "optional": true,
              "type": "array"
            },
            {
              "$ref": "Node",
              "description": "Import document for the HTMLImport links.",
              "name": "importedDocument",
              "optional": true
            },
            {
              "description": "Distributed nodes for given insertion point.",
              "experimental": true,
              "items": {
                "$ref": "BackendNode"
              },
              "name": "distributedNodes",
              "optional": true,
              "type": "array"
            }
          ],
          "type": "object"
        },
        {
          "description": "A structure holding an RGBA color.",
          "id": "RGBA",
          "properties": [
            {
              "description": "The red component, in the [0-255] range.",
              "name": "r",
              "type": "integer"
            },
            {
              "description": "The green component, in the [0-255] range.",
              "name": "g",
              "type": "integer"
            },
            {
              "description": "The blue component, in the [0-255] range.",
              "name": "b",
              "type": "integer"
            },
            {
              "description": "The alpha component, in the [0-1] range (default: 1).",
              "name": "a",
              "optional": true,
              "type": "number"
            }
          ],
          "type": "object"
        },
        {
          "description": "Configuration data for the highlighting of page elements.",
          "id": "HighlightConfig",
          "properties": [
            {
              "description": "Whether the node info tooltip should be shown (default: false).",
              "name": "showInfo",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the rulers should be shown (default: false).",
              "name": "showRulers",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the extension lines from node to the rulers should be shown (default: false).",
              "name": "showExtensionLines",
              "optional": true,
              "type": "boolean"
            },
            {
              "experimental": true,
              "name": "displayAsMaterial",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "RGBA",
              "description": "The content box highlight fill color (default: transparent).",
              "name": "contentColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The padding highlight fill color (default: transparent).",
              "name": "paddingColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The border highlight fill color (default: transparent).",
              "name": "borderColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The margin highlight fill color (default: transparent).",
              "name": "marginColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The event target element highlight fill color (default: transparent).",
              "experimental": true,
              "name": "eventTargetColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The shape outside fill color (default: transparent).",
              "experimental": true,
              "name": "shapeColor",
              "optional": true
            },
            {
              "$ref": "RGBA",
              "description": "The shape margin fill color (default: transparent).",
              "experimental": true,
              "name": "shapeMarginColor",
              "optional": true
            },
            {
              "description": "Selectors to highlight relevant nodes.",
              "name": "selectorList",
              "optional": true,
              "type": "string"
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Sets breakpoint on particular operation with DOM.",
          "name": "setDOMBreakpoint",
          "parameters": [
            {
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to set breakpoint on.",
              "name": "nodeId"
            },
            {
              "$ref": "DOMBreakpointType",
              "description": "Type of the operation to stop upon.",
              "name": "type"
            }
          ]
        },
        {
          "description": "Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>.",
          "name": "removeDOMBreakpoint",
          "parameters": [
            {
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to remove breakpoint from.",
              "name": "nodeId"
            },
            {
              "$ref": "DOMBreakpointType",
              "description": "Type of the breakpoint to remove.",
              "name": "type"
            }
          ]
        },
        {
          "description": "Sets breakpoint on particular DOM event.",
          "name": "setEventListenerBreakpoint",
          "parameters": [
            {
              "description": "DOM Event name to stop on (any DOM event will do).",
              "name": "eventName",
              "type": "string"
            },
            {
              "description": "EventTarget interface name to stop on. If equal to <code>\"*\"</code> or not provided, will stop on any EventTarget.",
              "experimental": true,
              "name": "targetName",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "description": "Removes breakpoint on particular DOM event.",
          "name": "removeEventListenerBreakpoint",
          "parameters": [
            {
              "description": "Event name.",
              "name": "eventName",
              "type": "string"
            },
            {
              "description": "EventTarget interface name.",
              "experimental": true,
              "name": "targetName",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "description": "Sets breakpoint on XMLHttpRequest.",
          "name": "setXHRBreakpoint",
          "parameters": [
            {
              "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon.",
              "name": "url",
              "type": "string"
            }
          ]
        },
        {
          "description": "Removes breakpoint from XMLHttpRequest.",
          "name": "removeXHRBreakpoint",
          "parameters": [
            {
              "description": "Resource URL substring.",
              "name": "url",
              "type": "string"
            }
          ]
        }
      ],
      "dependencies": [
        "DOM",
        "Debugger"
      ],
      "description": "DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.",
      "domain": "DOMDebugger",
      "types": [
        {
          "description": "DOM breakpoint type.",
          "enum": [
            "subtree-modified",
            "attribute-modified",
            "node-removed"
          ],
          "id": "DOMBreakpointType",
          "type": "string"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Dispatches a key event to the page.",
          "handlers": [
            "browser"
          ],
          "name": "dispatchKeyEvent",
          "parameters": [
            {
              "description": "Type of the key event.",
              "enum": [
                "keyDown",
                "keyUp",
                "rawKeyDown",
                "char"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).",
              "name": "modifiers",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).",
              "name": "timestamp",
              "optional": true,
              "type": "number"
            },
            {
              "description": "Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: \"\")",
              "name": "text",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: \"\").",
              "name": "unmodifiedText",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Unique key identifier (e.g., 'U+0041') (default: \"\").",
              "name": "keyIdentifier",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\").",
              "name": "code",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\").",
              "name": "key",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Windows virtual key code (default: 0).",
              "name": "windowsVirtualKeyCode",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Native virtual key code (default: 0).",
              "name": "nativeVirtualKeyCode",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Whether the event was generated from auto repeat (default: false).",
              "name": "autoRepeat",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the event was generated from the keypad (default: false).",
              "name": "isKeypad",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the event was a system key event (default: false).",
              "name": "isSystemKey",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Dispatches a mouse event to the page.",
          "handlers": [
            "browser"
          ],
          "name": "dispatchMouseEvent",
          "parameters": [
            {
              "description": "Type of the mouse event.",
              "enum": [
                "mousePressed",
                "mouseReleased",
                "mouseMoved"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "description": "X coordinate of the event relative to the main frame's viewport.",
              "name": "x",
              "type": "integer"
            },
            {
              "description": "Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.",
              "name": "y",
              "type": "integer"
            },
            {
              "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).",
              "name": "modifiers",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).",
              "name": "timestamp",
              "optional": true,
              "type": "number"
            },
            {
              "description": "Mouse button (default: \"none\").",
              "enum": [
                "none",
                "left",
                "middle",
                "right"
              ],
              "name": "button",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Number of times the mouse button was clicked (default: 0).",
              "name": "clickCount",
              "optional": true,
              "type": "integer"
            }
          ]
        }
      ],
      "domain": "Input",
      "events": [],
      "types": []
    },
    {
      "commands": [
        {
          "description": "Returns supported domains.",
          "handlers": [
            "browser",
            "renderer"
          ],
          "name": "getDomains",
          "returns": [
            {
              "description": "List of supported domains.",
              "items": {
                "$ref": "Domain"
              },
              "name": "domains",
              "type": "array"
            }
          ]
        }
      ],
      "description": "Provides information about the protocol schema.",
      "domain": "Schema",
      "types": [
        {
          "description": "Description of the protocol domain.",
          "exported": true,
          "id": "Domain",
          "properties": [
            {
              "description": "Domain name.",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Domain version.",
              "name": "version",
              "type": "string"
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "async": true,
          "description": "Evaluates expression on global object.",
          "name": "evaluate",
          "parameters": [
            {
              "description": "Expression to evaluate.",
              "name": "expression",
              "type": "string"
            },
            {
              "description": "Symbolic group name that can be used to release multiple objects.",
              "name": "objectGroup",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Determines whether Command Line API should be available during the evaluation.",
              "name": "includeCommandLineAPI",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.",
              "name": "silent",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "ExecutionContextId",
              "description": "Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.",
              "name": "contextId",
              "optional": true
            },
            {
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "name": "returnByValue",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether execution should be treated as initiated by user in the UI.",
              "experimental": true,
              "name": "userGesture",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.",
              "name": "awaitPromise",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "$ref": "RemoteObject",
              "description": "Evaluation result.",
              "name": "result"
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "async": true,
          "description": "Add handler to promise with given promise object id.",
          "name": "awaitPromise",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "description": "Identifier of the promise.",
              "name": "promiseObjectId"
            },
            {
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "name": "returnByValue",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the result.",
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "$ref": "RemoteObject",
              "description": "Promise result. Will contain rejected value if promise was rejected.",
              "name": "result"
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details if stack strace is available.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "async": true,
          "description": "Calls function with given declaration on the given object. Object group of the result is inherited from the target object.",
          "name": "callFunctionOn",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to call function on.",
              "name": "objectId"
            },
            {
              "description": "Declaration of the function to call.",
              "name": "functionDeclaration",
              "type": "string"
            },
            {
              "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target object.",
              "items": {
                "$ref": "CallArgument",
                "description": "Call argument."
              },
              "name": "arguments",
              "optional": true,
              "type": "array"
            },
            {
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.",
              "name": "silent",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the result is expected to be a JSON object which should be sent by value.",
              "name": "returnByValue",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether execution should be treated as initiated by user in the UI.",
              "experimental": true,
              "name": "userGesture",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.",
              "name": "awaitPromise",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "$ref": "RemoteObject",
              "description": "Call result.",
              "name": "result"
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "description": "Returns properties of a given object. Object group of the result is inherited from the target object.",
          "name": "getProperties",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to return properties for.",
              "name": "objectId"
            },
            {
              "description": "If true, returns properties belonging only to the element itself, not to its prototype chain.",
              "name": "ownProperties",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.",
              "experimental": true,
              "name": "accessorPropertiesOnly",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the results.",
              "experimental": true,
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "description": "Object properties.",
              "items": {
                "$ref": "PropertyDescriptor"
              },
              "name": "result",
              "type": "array"
            },
            {
              "description": "Internal object properties (only of the element itself).",
              "items": {
                "$ref": "InternalPropertyDescriptor"
              },
              "name": "internalProperties",
              "optional": true,
              "type": "array"
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "description": "Releases remote object with given id.",
          "name": "releaseObject",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to release.",
              "name": "objectId"
            }
          ]
        },
        {
          "description": "Releases all remote objects that belong to a given group.",
          "name": "releaseObjectGroup",
          "parameters": [
            {
              "description": "Symbolic object group name.",
              "name": "objectGroup",
              "type": "string"
            }
          ]
        },
        {
          "description": "Tells inspected instance to run if it was waiting for debugger to attach.",
          "name": "runIfWaitingForDebugger"
        },
        {
          "description": "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.",
          "name": "enable"
        },
        {
          "description": "Disables reporting of execution contexts creation.",
          "name": "disable"
        },
        {
          "description": "Discards collected exceptions and console API calls.",
          "name": "discardConsoleEntries"
        },
        {
          "description": "Compiles expression.",
          "name": "compileScript",
          "parameters": [
            {
              "description": "Expression to compile.",
              "name": "expression",
              "type": "string"
            },
            {
              "description": "Source url to be set for the script.",
              "name": "sourceURL",
              "type": "string"
            },
            {
              "description": "Specifies whether the compiled script should be persisted.",
              "name": "persistScript",
              "type": "boolean"
            },
            {
              "$ref": "ExecutionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.",
              "name": "executionContextId",
              "optional": true
            }
          ],
          "returns": [
            {
              "$ref": "ScriptId",
              "description": "Id of the script.",
              "name": "scriptId",
              "optional": true
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "async": true,
          "description": "Runs script with given id in a given context.",
          "name": "runScript",
          "parameters": [
            {
              "$ref": "ScriptId",
              "description": "Id of the script to run.",
              "name": "scriptId"
            },
            {
              "$ref": "ExecutionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.",
              "name": "executionContextId",
              "optional": true
            },
            {
              "description": "Symbolic group name that can be used to release multiple objects.",
              "name": "objectGroup",
              "optional": true,
              "type": "string"
            },
            {
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.",
              "name": "silent",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Determines whether Command Line API should be available during the evaluation.",
              "name": "includeCommandLineAPI",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the result is expected to be a JSON object which should be sent by value.",
              "name": "returnByValue",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the result.",
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.",
              "name": "awaitPromise",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "$ref": "RemoteObject",
              "description": "Run result.",
              "name": "result"
            },
            {
              "$ref": "ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        }
      ],
      "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.",
      "domain": "Runtime",
      "events": [
        {
          "description": "Issued when new execution context is created.",
          "name": "executionContextCreated",
          "parameters": [
            {
              "$ref": "ExecutionContextDescription",
              "description": "A newly created execution contex.",
              "name": "context"
            }
          ]
        },
        {
          "description": "Issued when execution context is destroyed.",
          "name": "executionContextDestroyed",
          "parameters": [
            {
              "$ref": "ExecutionContextId",
              "description": "Id of the destroyed context",
              "name": "executionContextId"
            }
          ]
        },
        {
          "description": "Issued when all executionContexts were cleared in browser",
          "name": "executionContextsCleared"
        },
        {
          "description": "Issued when exception was thrown and unhandled.",
          "name": "exceptionThrown",
          "parameters": [
            {
              "$ref": "Timestamp",
              "description": "Timestamp of the exception.",
              "name": "timestamp"
            },
            {
              "$ref": "ExceptionDetails",
              "name": "exceptionDetails"
            }
          ]
        },
        {
          "description": "Issued when unhandled exception was revoked.",
          "name": "exceptionRevoked",
          "parameters": [
            {
              "description": "Reason describing why exception was revoked.",
              "name": "reason",
              "type": "string"
            },
            {
              "description": "The id of revoked exception, as reported in <code>exceptionUnhandled</code>.",
              "name": "exceptionId",
              "type": "integer"
            }
          ]
        },
        {
          "description": "Issued when console API was called.",
          "name": "consoleAPICalled",
          "parameters": [
            {
              "description": "Type of the call.",
              "enum": [
                "log",
                "debug",
                "info",
                "error",
                "warning",
                "dir",
                "dirxml",
                "table",
                "trace",
                "clear",
                "startGroup",
                "startGroupCollapsed",
                "endGroup",
                "assert",
                "profile",
                "profileEnd"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "description": "Call arguments.",
              "items": {
                "$ref": "RemoteObject"
              },
              "name": "args",
              "type": "array"
            },
            {
              "$ref": "ExecutionContextId",
              "description": "Identifier of the context where the call was made.",
              "name": "executionContextId"
            },
            {
              "$ref": "Timestamp",
              "description": "Call timestamp.",
              "name": "timestamp"
            },
            {
              "$ref": "StackTrace",
              "description": "Stack trace captured when the call was made.",
              "name": "stackTrace",
              "optional": true
            }
          ]
        },
        {
          "description": "Issued when object should be inspected (for example, as a result of inspect() command line API call).",
          "name": "inspectRequested",
          "parameters": [
            {
              "$ref": "RemoteObject",
              "name": "object"
            },
            {
              "name": "hints",
              "type": "object"
            }
          ]
        }
      ],
      "types": [
        {
          "description": "Unique script identifier.",
          "id": "ScriptId",
          "type": "string"
        },
        {
          "description": "Unique object identifier.",
          "id": "RemoteObjectId",
          "type": "string"
        },
        {
          "description": "Primitive value which cannot be JSON-stringified.",
          "enum": [
            "Infinity",
            "NaN",
            "-Infinity",
            "-0"
          ],
          "id": "UnserializableValue",
          "type": "string"
        },
        {
          "description": "Mirror object referencing original JavaScript object.",
          "exported": true,
          "id": "RemoteObject",
          "properties": [
            {
              "description": "Object type.",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "description": "Object subtype hint. Specified for <code>object</code> type values only.",
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "map",
                "set",
                "iterator",
                "generator",
                "error",
                "proxy",
                "promise",
                "typedarray"
              ],
              "name": "subtype",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Object class (constructor) name. Specified for <code>object</code> type values only.",
              "name": "className",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Remote object value in case of primitive values or JSON values (if it was requested).",
              "name": "value",
              "optional": true,
              "type": "any"
            },
            {
              "$ref": "UnserializableValue",
              "description": "Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.",
              "name": "unserializableValue",
              "optional": true
            },
            {
              "description": "String representation of the object.",
              "name": "description",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "RemoteObjectId",
              "description": "Unique object identifier (for non-primitive values).",
              "name": "objectId",
              "optional": true
            },
            {
              "$ref": "ObjectPreview",
              "description": "Preview containing abbreviated property values. Specified for <code>object</code> type values only.",
              "experimental": true,
              "name": "preview",
              "optional": true
            },
            {
              "$ref": "CustomPreview",
              "experimental": true,
              "name": "customPreview",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Object property descriptor.",
          "id": "PropertyDescriptor",
          "properties": [
            {
              "description": "Property name or symbol description.",
              "name": "name",
              "type": "string"
            },
            {
              "$ref": "RemoteObject",
              "description": "The value associated with the property.",
              "name": "value",
              "optional": true
            },
            {
              "description": "True if the value associated with the property may be changed (data descriptors only).",
              "name": "writable",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "RemoteObject",
              "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).",
              "name": "get",
              "optional": true
            },
            {
              "$ref": "RemoteObject",
              "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).",
              "name": "set",
              "optional": true
            },
            {
              "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.",
              "name": "configurable",
              "type": "boolean"
            },
            {
              "description": "True if this property shows up during enumeration of the properties on the corresponding object.",
              "name": "enumerable",
              "type": "boolean"
            },
            {
              "description": "True if the result was thrown during the evaluation.",
              "name": "wasThrown",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "True if the property is owned for the object.",
              "name": "isOwn",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "RemoteObject",
              "description": "Property symbol object, if the property is of the <code>symbol</code> type.",
              "name": "symbol",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
          "id": "InternalPropertyDescriptor",
          "properties": [
            {
              "description": "Conventional property name.",
              "name": "name",
              "type": "string"
            },
            {
              "$ref": "RemoteObject",
              "description": "The value associated with the property.",
              "name": "value",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.",
          "id": "CallArgument",
          "properties": [
            {
              "description": "Primitive value.",
              "name": "value",
              "optional": true,
              "type": "any"
            },
            {
              "$ref": "UnserializableValue",
              "description": "Primitive value which can not be JSON-stringified.",
              "name": "unserializableValue",
              "optional": true
            },
            {
              "$ref": "RemoteObjectId",
              "description": "Remote object handle.",
              "name": "objectId",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Id of an execution context.",
          "id": "ExecutionContextId",
          "type": "integer"
        },
        {
          "description": "Description of an isolated world.",
          "id": "ExecutionContextDescription",
          "properties": [
            {
              "$ref": "ExecutionContextId",
              "description": "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.",
              "name": "id"
            },
            {
              "description": "Execution context origin.",
              "name": "origin",
              "type": "string"
            },
            {
              "description": "Human readable name describing given context.",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Embedder-specific auxiliary data.",
              "name": "auxData",
              "optional": true,
              "type": "object"
            }
          ],
          "type": "object"
        },
        {
          "description": "Detailed information about exception (or error) that was thrown during script compilation or execution.",
          "id": "ExceptionDetails",
          "properties": [
            {
              "description": "Exception id.",
              "name": "exceptionId",
              "type": "integer"
            },
            {
              "description": "Exception text, which should be used together with exception object when available.",
              "name": "text",
              "type": "string"
            },
            {
              "description": "Line number of the exception location (0-based).",
              "name": "lineNumber",
              "type": "integer"
            },
            {
              "description": "Column number of the exception location (0-based).",
              "name": "columnNumber",
              "type": "integer"
            },
            {
              "$ref": "ScriptId",
              "description": "Script ID of the exception location.",
              "name": "scriptId",
              "optional": true
            },
            {
              "description": "URL of the exception location, to be used when the script was not reported.",
              "name": "url",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "StackTrace",
              "description": "JavaScript stack trace if available.",
              "name": "stackTrace",
              "optional": true
            },
            {
              "$ref": "RemoteObject",
              "description": "Exception object if available.",
              "name": "exception",
              "optional": true
            },
            {
              "$ref": "ExecutionContextId",
              "description": "Identifier of the context where exception happened.",
              "name": "executionContextId",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Number of milliseconds since epoch.",
          "id": "Timestamp",
          "type": "number"
        },
        {
          "description": "Stack entry for runtime errors and assertions.",
          "id": "CallFrame",
          "properties": [
            {
              "description": "JavaScript function name.",
              "name": "functionName",
              "type": "string"
            },
            {
              "$ref": "ScriptId",
              "description": "JavaScript script id.",
              "name": "scriptId"
            },
            {
              "description": "JavaScript script name or url.",
              "name": "url",
              "type": "string"
            },
            {
              "description": "JavaScript script line number (0-based).",
              "name": "lineNumber",
              "type": "integer"
            },
            {
              "description": "JavaScript script column number (0-based).",
              "name": "columnNumber",
              "type": "integer"
            }
          ],
          "type": "object"
        },
        {
          "description": "Call frames for assertions or error messages.",
          "exported": true,
          "id": "StackTrace",
          "properties": [
            {
              "description": "String label of this stack trace. For async traces this may be a name of the function that initiated the async call.",
              "name": "description",
              "optional": true,
              "type": "string"
            },
            {
              "description": "JavaScript function name.",
              "items": {
                "$ref": "CallFrame"
              },
              "name": "callFrames",
              "type": "array"
            },
            {
              "$ref": "StackTrace",
              "description": "Asynchronous JavaScript stack trace that preceded this stack, if available.",
              "name": "parent",
              "optional": true
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.",
          "name": "enable"
        },
        {
          "description": "Disables debugger for given page.",
          "name": "disable"
        },
        {
          "description": "Activates / deactivates all breakpoints on the page.",
          "name": "setBreakpointsActive",
          "parameters": [
            {
              "description": "New value for breakpoints active state.",
              "name": "active",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).",
          "name": "setSkipAllPauses",
          "parameters": [
            {
              "description": "New value for skip pauses state.",
              "name": "skip",
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.",
          "name": "setBreakpointByUrl",
          "parameters": [
            {
              "description": "Line number to set breakpoint at.",
              "name": "lineNumber",
              "type": "integer"
            },
            {
              "description": "URL of the resources to set breakpoint on.",
              "name": "url",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.",
              "name": "urlRegex",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Offset in the line to set breakpoint at.",
              "name": "columnNumber",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.",
              "name": "condition",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference.",
              "name": "breakpointId"
            },
            {
              "description": "List of the locations this breakpoint resolved into upon addition.",
              "items": {
                "$ref": "Location"
              },
              "name": "locations",
              "type": "array"
            }
          ]
        },
        {
          "description": "Sets JavaScript breakpoint at a given location.",
          "name": "setBreakpoint",
          "parameters": [
            {
              "$ref": "Location",
              "description": "Location to set breakpoint in.",
              "name": "location"
            },
            {
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.",
              "name": "condition",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference.",
              "name": "breakpointId"
            },
            {
              "$ref": "Location",
              "description": "Location this breakpoint resolved into.",
              "name": "actualLocation"
            }
          ]
        },
        {
          "description": "Removes JavaScript breakpoint.",
          "name": "removeBreakpoint",
          "parameters": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId"
            }
          ]
        },
        {
          "description": "Continues execution until specific location is reached.",
          "name": "continueToLocation",
          "parameters": [
            {
              "$ref": "Location",
              "description": "Location to continue to.",
              "name": "location"
            }
          ]
        },
        {
          "description": "Steps over the statement.",
          "name": "stepOver"
        },
        {
          "description": "Steps into the function call.",
          "name": "stepInto"
        },
        {
          "description": "Steps out of the function call.",
          "name": "stepOut"
        },
        {
          "description": "Stops on the next JavaScript statement.",
          "name": "pause"
        },
        {
          "description": "Resumes JavaScript execution.",
          "name": "resume"
        },
        {
          "description": "Edits JavaScript source live.",
          "name": "setScriptSource",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "description": "Id of the script to edit.",
              "name": "scriptId"
            },
            {
              "description": "New content of the script.",
              "name": "scriptSource",
              "type": "string"
            },
            {
              "description": " If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.",
              "name": "dryRun",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "description": "New stack trace in case editing has happened while VM was stopped.",
              "items": {
                "$ref": "CallFrame"
              },
              "name": "callFrames",
              "optional": true,
              "type": "array"
            },
            {
              "description": "Whether current call stack  was modified after applying the changes.",
              "name": "stackChanged",
              "optional": true,
              "type": "boolean"
            },
            {
              "$ref": "Runtime.StackTrace",
              "description": "Async stack trace, if any.",
              "name": "asyncStackTrace",
              "optional": true
            },
            {
              "$ref": "Runtime.ExceptionDetails",
              "description": "Exception details if any.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "description": "Restarts particular call frame from the beginning.",
          "name": "restartFrame",
          "parameters": [
            {
              "$ref": "CallFrameId",
              "description": "Call frame identifier to evaluate on.",
              "name": "callFrameId"
            }
          ],
          "returns": [
            {
              "description": "New stack trace.",
              "items": {
                "$ref": "CallFrame"
              },
              "name": "callFrames",
              "type": "array"
            },
            {
              "$ref": "Runtime.StackTrace",
              "description": "Async stack trace, if any.",
              "name": "asyncStackTrace",
              "optional": true
            }
          ]
        },
        {
          "description": "Returns source for the script with given id.",
          "name": "getScriptSource",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "description": "Id of the script to get source for.",
              "name": "scriptId"
            }
          ],
          "returns": [
            {
              "description": "Script source.",
              "name": "scriptSource",
              "type": "string"
            }
          ]
        },
        {
          "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.",
          "name": "setPauseOnExceptions",
          "parameters": [
            {
              "description": "Pause on exceptions mode.",
              "enum": [
                "none",
                "uncaught",
                "all"
              ],
              "name": "state",
              "type": "string"
            }
          ]
        },
        {
          "description": "Evaluates expression on a given call frame.",
          "name": "evaluateOnCallFrame",
          "parameters": [
            {
              "$ref": "CallFrameId",
              "description": "Call frame identifier to evaluate on.",
              "name": "callFrameId"
            },
            {
              "description": "Expression to evaluate.",
              "name": "expression",
              "type": "string"
            },
            {
              "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).",
              "name": "objectGroup",
              "optional": true,
              "type": "string"
            },
            {
              "description": "Specifies whether command line API should be available to the evaluated expression, defaults to false.",
              "name": "includeCommandLineAPI",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.",
              "name": "silent",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "name": "returnByValue",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "name": "generatePreview",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "$ref": "Runtime.RemoteObject",
              "description": "Object wrapper for the evaluation result.",
              "name": "result"
            },
            {
              "$ref": "Runtime.ExceptionDetails",
              "description": "Exception details.",
              "name": "exceptionDetails",
              "optional": true
            }
          ]
        },
        {
          "description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.",
          "name": "setVariableValue",
          "parameters": [
            {
              "description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.",
              "name": "scopeNumber",
              "type": "integer"
            },
            {
              "description": "Variable name.",
              "name": "variableName",
              "type": "string"
            },
            {
              "$ref": "Runtime.CallArgument",
              "description": "New variable value.",
              "name": "newValue"
            },
            {
              "$ref": "CallFrameId",
              "description": "Id of callframe that holds variable.",
              "name": "callFrameId"
            }
          ]
        },
        {
          "description": "Enables or disables async call stacks tracking.",
          "name": "setAsyncCallStackDepth",
          "parameters": [
            {
              "description": "Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).",
              "name": "maxDepth",
              "type": "integer"
            }
          ]
        }
      ],
      "dependencies": [
        "Runtime"
      ],
      "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.",
      "domain": "Debugger",
      "events": [
        {
          "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.",
          "name": "scriptParsed",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "description": "Identifier of the script parsed.",
              "name": "scriptId"
            },
            {
              "description": "URL or name of the script parsed (if any).",
              "name": "url",
              "type": "string"
            },
            {
              "description": "Line offset of the script within the resource with given URL (for script tags).",
              "name": "startLine",
              "type": "integer"
            },
            {
              "description": "Column offset of the script within the resource with given URL.",
              "name": "startColumn",
              "type": "integer"
            },
            {
              "description": "Last line of the script.",
              "name": "endLine",
              "type": "integer"
            },
            {
              "description": "Length of the last line of the script.",
              "name": "endColumn",
              "type": "integer"
            },
            {
              "$ref": "Runtime.ExecutionContextId",
              "description": "Specifies script creation context.",
              "name": "executionContextId"
            },
            {
              "description": "Content hash of the script.",
              "name": "hash",
              "type": "string"
            },
            {
              "description": "Embedder-specific auxiliary data.",
              "name": "executionContextAuxData",
              "optional": true,
              "type": "object"
            },
            {
              "description": "True, if this script is generated as a result of the live edit operation.",
              "experimental": true,
              "name": "isLiveEdit",
              "optional": true,
              "type": "boolean"
            },
            {
              "description": "URL of source map associated with script (if any).",
              "name": "sourceMapURL",
              "optional": true,
              "type": "string"
            },
            {
              "description": "True, if this script has sourceURL.",
              "experimental": true,
              "name": "hasSourceURL",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Fired when virtual machine fails to parse the script.",
          "name": "scriptFailedToParse",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "description": "Identifier of the script parsed.",
              "name": "scriptId"
            },
            {
              "description": "URL or name of the script parsed (if any).",
              "name": "url",
              "type": "string"
            },
            {
              "description": "Line offset of the script within the resource with given URL (for script tags).",
              "name": "startLine",
              "type": "integer"
            },
            {
              "description": "Column offset of the script within the resource with given URL.",
              "name": "startColumn",
              "type": "integer"
            },
            {
              "description": "Last line of the script.",
              "name": "endLine",
              "type": "integer"
            },
            {
              "description": "Length of the last line of the script.",
              "name": "endColumn",
              "type": "integer"
            },
            {
              "$ref": "Runtime.ExecutionContextId",
              "description": "Specifies script creation context.",
              "name": "executionContextId"
            },
            {
              "description": "Content hash of the script.",
              "name": "hash",
              "type": "string"
            },
            {
              "description": "Embedder-specific auxiliary data.",
              "name": "executionContextAuxData",
              "optional": true,
              "type": "object"
            },
            {
              "description": "URL of source map associated with script (if any).",
              "name": "sourceMapURL",
              "optional": true,
              "type": "string"
            },
            {
              "description": "True, if this script has sourceURL.",
              "experimental": true,
              "name": "hasSourceURL",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "description": "Fired when breakpoint is resolved to an actual script and location.",
          "name": "breakpointResolved",
          "parameters": [
            {
              "$ref": "BreakpointId",
              "description": "Breakpoint unique identifier.",
              "name": "breakpointId"
            },
            {
              "$ref": "Location",
              "description": "Actual breakpoint location.",
              "name": "location"
            }
          ]
        },
        {
          "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.",
          "name": "paused",
          "parameters": [
            {
              "description": "Call stack the virtual machine stopped on.",
              "items": {
                "$ref": "CallFrame"
              },
              "name": "callFrames",
              "type": "array"
            },
            {
              "description": "Pause reason.",
              "enum": [
                "XHR",
                "DOM",
                "EventListener",
                "exception",
                "assert",
                "debugCommand",
                "promiseRejection",
                "other"
              ],
              "exported": true,
              "name": "reason",
              "type": "string"
            },
            {
              "description": "Object containing break-specific auxiliary properties.",
              "name": "data",
              "optional": true,
              "type": "object"
            },
            {
              "description": "Hit breakpoints IDs",
              "items": {
                "type": "string"
              },
              "name": "hitBreakpoints",
              "optional": true,
              "type": "array"
            },
            {
              "$ref": "Runtime.StackTrace",
              "description": "Async stack trace, if any.",
              "name": "asyncStackTrace",
              "optional": true
            }
          ]
        },
        {
          "description": "Fired when the virtual machine resumed execution.",
          "name": "resumed"
        }
      ],
      "types": [
        {
          "description": "Breakpoint identifier.",
          "id": "BreakpointId",
          "type": "string"
        },
        {
          "description": "Call frame identifier.",
          "id": "CallFrameId",
          "type": "string"
        },
        {
          "description": "Location in the source code.",
          "id": "Location",
          "properties": [
            {
              "$ref": "Runtime.ScriptId",
              "description": "Script identifier as reported in the <code>Debugger.scriptParsed</code>.",
              "name": "scriptId"
            },
            {
              "description": "Line number in the script (0-based).",
              "name": "lineNumber",
              "type": "integer"
            },
            {
              "description": "Column number in the script (0-based).",
              "name": "columnNumber",
              "optional": true,
              "type": "integer"
            }
          ],
          "type": "object"
        },
        {
          "description": "JavaScript call frame. Array of call frames form the call stack.",
          "id": "CallFrame",
          "properties": [
            {
              "$ref": "CallFrameId",
              "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused.",
              "name": "callFrameId"
            },
            {
              "description": "Name of the JavaScript function called on this call frame.",
              "name": "functionName",
              "type": "string"
            },
            {
              "$ref": "Location",
              "description": "Location in the source code.",
              "experimental": true,
              "name": "functionLocation",
              "optional": true
            },
            {
              "$ref": "Location",
              "description": "Location in the source code.",
              "name": "location"
            },
            {
              "description": "Scope chain for this call frame.",
              "items": {
                "$ref": "Scope"
              },
              "name": "scopeChain",
              "type": "array"
            },
            {
              "$ref": "Runtime.RemoteObject",
              "description": "<code>this</code> object for this call frame.",
              "name": "this"
            },
            {
              "$ref": "Runtime.RemoteObject",
              "description": "The value being returned, if the function is at return point.",
              "name": "returnValue",
              "optional": true
            }
          ],
          "type": "object"
        },
        {
          "description": "Scope description.",
          "id": "Scope",
          "properties": [
            {
              "description": "Scope type.",
              "enum": [
                "global",
                "local",
                "with",
                "closure",
                "catch",
                "block",
                "script"
              ],
              "name": "type",
              "type": "string"
            },
            {
              "$ref": "Runtime.RemoteObject",
              "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.",
              "name": "object"
            },
            {
              "name": "name",
              "optional": true,
              "type": "string"
            },
            {
              "$ref": "Location",
              "description": "Location in the source code where scope starts",
              "name": "startLocation",
              "optional": true
            },
            {
              "$ref": "Location",
              "description": "Location in the source code where scope ends",
              "name": "endLocation",
              "optional": true
            }
          ],
          "type": "object"
        }
      ]
    },
    {
      "commands": [
        {
          "name": "enable"
        },
        {
          "name": "disable"
        },
        {
          "description": "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.",
          "name": "setSamplingInterval",
          "parameters": [
            {
              "description": "New sampling interval in microseconds.",
              "name": "interval",
              "type": "integer"
            }
          ]
        },
        {
          "name": "start"
        },
        {
          "name": "stop",
          "returns": [
            {
              "$ref": "Profile",
              "description": "Recorded profile.",
              "name": "profile"
            }
          ]
        }
      ],
      "dependencies": [
        "Runtime",
        "Debugger"
      ],
      "domain": "Profiler",
      "events": [
        {
          "description": "Sent when new profile recodring is started using console.profile() call.",
          "name": "consoleProfileStarted",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "$ref": "Debugger.Location",
              "description": "Location of console.profile().",
              "name": "location"
            },
            {
              "description": "Profile title passed as an argument to console.profile().",
              "name": "title",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "consoleProfileFinished",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "$ref": "Debugger.Location",
              "description": "Location of console.profileEnd().",
              "name": "location"
            },
            {
              "$ref": "Profile",
              "name": "profile"
            },
            {
              "description": "Profile title passed as an argument to console.profile().",
              "name": "title",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ],
      "types": [
        {
          "description": "Profile node. Holds callsite information, execution statistics and child nodes.",
          "id": "ProfileNode",
          "properties": [
            {
              "description": "Unique id of the node.",
              "name": "id",
              "type": "integer"
            },
            {
              "$ref": "Runtime.CallFrame",
              "description": "Function location.",
              "name": "callFrame"
            },
            {
              "description": "Number of samples where this node was on top of the call stack.",
              "experimental": true,
              "name": "hitCount",
              "optional": true,
              "type": "integer"
            },
            {
              "description": "Child node ids.",
              "items": {
                "type": "integer"
              },
              "name": "children",
              "optional": true,
              "type": "array"
            },
            {
              "description": "The reason of being not optimized. The function may be deoptimized or marked as don't optimize.",
              "name": "deoptReason",
              "optional": true,
              "type": "string"
            },
            {
              "description": "An array of source position ticks.",
              "experimental": true,
              "items": {
                "$ref": "PositionTickInfo"
              },
              "name": "positionTicks",
              "optional": true,
              "type": "array"
            }
          ],
          "type": "object"
        },
        {
          "description": "Profile.",
          "id": "Profile",
          "properties": [
            {
              "description": "The list of profile nodes. First item is the root node.",
              "items": {
                "$ref": "ProfileNode"
              },
              "name": "nodes",
              "type": "array"
            },
            {
              "description": "Profiling start timestamp in microseconds.",
              "name": "startTime",
              "type": "number"
            },
            {
              "description": "Profiling end timestamp in microseconds.",
              "name": "endTime",
              "type": "number"
            },
            {
              "description": "Ids of samples top nodes.",
              "items": {
                "type": "integer"
              },
              "name": "samples",
              "optional": true,
              "type": "array"
            },
            {
              "description": "Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.",
              "items": {
                "type": "integer"
              },
              "name": "timeDeltas",
              "optional": true,
              "type": "array"
            }
          ],
          "type": "object"
        }
      ]
    }
  ],
  "version": {
    "major": "1",
    "minor": "2"
  }
}